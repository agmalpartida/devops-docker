###########################################################################
#
#     ███       ▄▄▄▄███▄▄▄▄   ███    █▄  ▀████    ▐████▀
# ▀█████████▄ ▄██▀▀▀███▀▀▀██▄ ███    ███   ███▌   ████▀
#    ▀███▀▀██ ███   ███   ███ ███    ███    ███  ▐███
#     ███   ▀ ███   ███   ███ ███    ███    ▀███▄███▀
#     ███     ███   ███   ███ ███    ███    ████▀██▄
#     ███     ███   ███   ███ ███    ███   ▐███  ▀███
#     ███     ███   ███   ███ ███    ███  ▄███     ███▄
#    ▄████▀    ▀█   ███   █▀  ████████▀  ████       ███▄
###########################################################################

# source-file ~/Git/dotfiles/.config/tmux/themes/tmux-gruvbox-dark.conf

run-shell ~/Git/dotfiles/.config/tmux/themes/tmux-onedark-theme/tmux-onedark-theme.tmux
set -g @onedark_widgets "#(date +%s)"
set -g @onedark_time_format "%I:%M %p"
set -g @onedark_date_format "%D"

# bind-key -n --> for not hit the bind-key before
# bind is an alias for bind-key, they have the same efect. bind-k and bin should be also works.

# tmux list-keys | grep "send-keys -X cancel"

# How to start tmux with attach if a session exists: tmux new-session -A -s main
# General options {{{
# Change prefix from default (C-b) to C-a
unbind -n C-b
set -g prefix C-g
bind-key l last-window

# bind-key -n C-m copy-mode
bind-key -n C-b copy-mode

# only this line might not be enough
set -g default-terminal "xterm-256color"

# - WARNING: Neither Tc nor RGB capability set. True colors are disabled. |'termguicolors'| won't work properly.
#   - ADVICE:
#     - Put this in your ~/.tmux.conf and replace XXX by your $TERM outside of tmux:
#         set-option -sa terminal-overrides ',XXX:RGB'
#     - For older tmux versions use this instead:
#         set-option -ga terminal-overrides ',XXX:Tc'
set-option -sa terminal-overrides ',xterm-256color:RGB'

# Needs this line also to overrides the default color
# set-option -ga terminal-overrides ",xterm-256color:Tc"

# word separators for automatic word selection
setw -g word-separators ' @"=/()[]_-:,.'
setw -ag word-separators "'"

# tmux 1.7 includes the renumber-windows session option that maintains a “gapless” sequence for a session’s window numbers.
set-option -g renumber-windows on

# Ring the bell if any background window rang a bell
# set -g visual-activity on
# setw -g monitor-activity on
# set -g visual-silence on
# setw -g monitor-silence 30

## scrollback size
set -g history-limit 50000

set -g renumber-windows on    # renumber windows when a window is closed
# set first window to index 1 (not 0) to map more to the keyboard layout
set -g base-index 1
setw -g pane-base-index 1



# Neovim recommendations
# window rename on focus
#set -g focus-events on
# command delay? We don't want that, make it short
set-option -sg escape-time 0


########################################################################### }}}
# General keymap {{{
###########################################################################
# Keep your finger on ctrl, or don't, same result
bind-key C-d detach-client
bind-key C-c new-window

# reload tmux config
unbind r

bind r source-file ~/.tmux.conf \; display-popup -h 20 -w 80 -E 'figlet -f banner -c "Tmux Reloaded !!!" | lolcat & sleep .8'
# sudo pacman -S figlet lolcat
# git clone https://github.com/xero/figlet-fonts.git ~/.local/share/fonts

# Quick ways to kill single windows and the whole server
# bind-key '/' --> copycat PLUGIN
bind-key '\' confirm-before 'kill-server'
#bind-key 'X' confirm-before -p "Kill #S (y/n)?" 'kill-session'

# Todo list
bind -r T neww -c "#{pane_current_path}" -n "CHECK" "[[ -e .check.md ]] && nvim .check.md || nvim ~/Desktop/.check.md"
#bind -r M neww -c "#{pane_current_path}" -n "Ranger" "ranger"
# mkdocs my documentation
#bind -r D neww -c "#{pane_current_path}" -n "My-Docs" "mkdocs serve --config-file ~/Git/my-docs/mkdocs.yml"

########################################################################### }}}
# Pastebuffer {{{
###########################################################################
## Use vim keybindings in copy mode
set-option -g mouse on
setw -g mode-keys vi
# set-option -s set-clipboard off
bind P paste-buffer
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi y send-keys -X rectangle-toggle
if-shell -b 'test $(uname) = "Linux"' 'bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "xclip -in -selection clipboard"'
if-shell -b 'test $(uname) = "Darwin"' 'bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "pbcopy"'

# unbind -T copy-mode-vi Enter
# bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel 'xclip -se c -i'
# bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel 'xclip -se c -i'
#     Now you can enter copy mode normally with CTRL+B and [.
#     Navigate the copy mode with vi-like-key bindings (u for up, d for down, etc.)
#     Hit v to start copying.
#     Press y or Enter to copy the text into the tmux buffer. This automatically cancels copy mode.
#     Paste into the buffer with <prefix>+P (make sure that it’s uppercase P).

# Or alternatively, use the mouse to copy text after you’ve entered copy mode.

# PASTE FROM NVIM: with nvim plugin "tmux.nvim" installed in order to sync registers across nvim and tmux, copy normally on nvim and paste with Prefix + P for paste on tmux pane

#
########################################################################### }}}
# Status bar {{{
###########################################################################
# Copyright (C) 2017-present Arctic Ice Studio <development@arcticicestudio.com>
# Copyright (C) 2017-present Sven Greb <development@svengreb.de>

# Project:    Nord tmux
# Repository: https://github.com/arcticicestudio/nord-tmux
# License:    MIT

#+----------------+
#+ Plugin Support +
#+----------------+
#+--- tmux-prefix-highlight ---+
set -g @prefix_highlight_fg black
set -g @prefix_highlight_bg brightcyan

#+---------+
#+ Options +
#+---------+
set -g status-interval 1
set -g status on

#+--------+
#+ Status +
#+--------+
#+--- Layout ---+
set -g status-justify left

#+--- Colors ---+
set -g status-style bg=black,fg=white

#+-------+
#+ Panes +
#+-------+
set -g pane-border-style bg=default,fg=brightblack
set -g pane-active-border-style bg=default,fg=blue
set -g display-panes-colour black
set -g display-panes-active-colour brightblack

#+------------+
#+ Clock Mode +
#+------------+
setw -g clock-mode-colour cyan

#+----------+
#+ Messages +
#+---------+
set -g message-style bg=brightblack,fg=cyan
set -g message-command-style bg=brightblack,fg=cyan


# status bar to the top
set-option -g status-position top


########################################################################### }}}
# Pane {{{
############################################################################

# set -g display-panes-time 4000
# to make the numbers appear until you select a pane
bind -T prefix q display-panes -d 0

# list panes (no selection)
bind-key Space list-panes

# break-pane. convert a pane in a window
bind-key Enter break-pane

# Join window in panes
# bind-key j command-prompt "joinp -t:%%" # %% = prompt for window.pane [-V|H] # vert|hor split

# Below code WORK with vim-tmux-navigator plugin for neovim (FZF C-j and C-k NOT WORK)
# Plugin for nvim: https://github.com/nathom/tmux.nvim
# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
## BELOW WORK in fzf
is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

is_fzf="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?fzf$'"


bind -n C-h run "($is_vim && tmux send-keys C-h) || \
                          tmux select-pane -L"

bind -n C-j run "($is_vim && tmux send-keys C-j)  || \
                         ($is_fzf && tmux send-keys C-j) || \
                         tmux select-pane -D"

bind -n C-k run "($is_vim && tmux send-keys C-k) || \
                          ($is_fzf && tmux send-keys C-k)  || \
                          tmux select-pane -U"

bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'

bind-key -n 'C-\' if-shell "$is_vim" "send-keys C-\\" "select-pane -l"



# Vim-like pane resizing, -r is repeatable
bind-key -r '+' resize-pane -U 5
bind-key -r '-' resize-pane -D 5
bind-key -r '<' resize-pane -L 5
bind-key -r '>' resize-pane -R 5

# Restoring Clear Screen (C-l)
# With this enabled you can use <prefix> C-l to clear the screen.
bind C-l send-keys 'C-l'

# panes synchronization
# Prefix + e ==> enable command mirror
# Prefix + E ==> disable command mirror
# easily toggle synchronization (mnemonic: e is for echo)
# sends input to all panes in a given window.
bind e setw synchronize-panes on
bind E setw synchronize-panes off

# move pane
bind-key -n C-o rotate-window
# rotate between panes
bind-key -n C-y select-pane -t :.+

# Pane zoom
bind C-z run "~/.scripts/tmux/tmux-zoom.sh"

### pane styling
# set -g pane-border-status bottom
# set -g pane-border-format '#(sh ~/.scripts/tmux/pane-border-format.sh \
#    --pane-current-path=#{pane_current_path} \
#    --pane-active=#{pane_active})'
# set -s status-interval 1

# pane title formatting
# set -g pane-border-format ' #T '

# set-hook -g pane-focus-in 'rename-window "#T"'

# set -g pane-active-border-style 'fg=#ECB365 bg=black'
# set -g pane-border-style 'fg=#6998AB bg=black'

############################################################################ }}}
# Windows {{{
############################################################################
#set-window-option -g window-status-current-bg green
# to rename window
bind A command-prompt "rename-window %%"

# Horizontal and vertical splits
bind '_' split-window -v
bind '|' split-window -h

############################################################################ }}}
# Sessions {{{
############################################################################
# ===================
# ╔═╗┌─┐┌─┐┌─┐┬┌─┐┌┐┌
# ╚═╗├┤ └─┐└─┐││ ││││
# ╚═╝└─┘└─┘└─┘┴└─┘┘└┘
# ===================
# Switch sessions
bind -r ( switch-client -p  # prev
bind -r ) switch-client -n  # next

bind X confirm-before kill-session

# Prefix + f + Enter => List Windows and Sessions
# Prefix + $ ==> RENAME Sessions

bind-key N run-shell 'TMUX= tmux new-session -d \; switch-client -n'
# Clone Session
bind-key C run-shell 'TMUX= tmux new-session -t $(tmux display-message -p #S) -s $(tmux display-message -p #S-clone) -d \; switch-client -n \; display-message "session #S cloned"'

# display session and his window with fzf
bind C-k display-popup -E "tmux list-windows -a -F '#{session_name}:#{window_index} - #{window_name}' \
                          | grep -v \"^$(tmux display-message -p '#S')\$\" \
                          | fzf --reverse \
                          | sed -E 's/\s-.*$//' \
                          | xargs tmux switch-client -t"


# script tmux-session-menu under ~/.scripts/bin/ - display sessions and his windows with window preview
#bind-key S run-shell ~/.scripts/tmux/tmux-session-menu

# only show status bar if there is more then one window
# set -g status off
# set-hook -g after-new-window      'if "[ #{session_windows} -gt 1 ]" "set status on"'
# set-hook -g after-kill-pane       'if "[ #{session_windows} -lt 2 ]" "set status off"'
# set-hook -g pane-exited           'if "[ #{session_windows} -lt 2 ]" "set status off"'
# set-hook -g window-layout-changed 'if "[ #{session_windows} -lt 2 ]" "set status off"'

# }}}
# Plugins {{{
############################################################################
# To install plugins:
#   1) Add plugin down here
#   2) Prefix + I to install plugin
# To update plugins:
#   1) Prefix + U
# To remove plugins:
#   1) Remove line down here
#   2) Prefix + ALT + U
# If you're using iTerm2 on a Mac you may need to go to your Profiles,
# then keys and select that the `option` key should be treated as `Esc+`
# in order for the `Prefix + ALT + U` combination to work.


if "test ! -d ~/.tmux/plugins/tpm" \
   "run 'git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm && ~/.tmux/plugins/tpm/bin/install_plugins'"


# List of plugins

#set -g @plugin 'nhdaly/tmux-better-mouse-mode'

set -g @plugin 'christoomey/vim-tmux-navigator'

# Better Window names for tmux
# set -g @plugin 'ofirgall/tmux-window-name'
# set -g @tmux_window_name_shells "['zsh', 'bash', 'sh']"
# set -g @tmux_window_dir_programs "['nvim', 'vim', 'vi', 'git', 'python']"
# set -g @tmux_window_max_name_len "20"

# set -g @tpm_plugins 'tmux-plugins/tmux-prefix-highlight' # highlights when you press tmux prefix key
set -g @plugin 'tmux-plugins/tmux-yank' # copy to the system clipboard
# set -g @plugin 'soyuka/tmux-current-pane-hostname'

# set -g @plugin "arcticicestudio/nord-tmux"
# set -g @nord_tmux_show_status_content "0"
# set -g @nord_tmux_no_patched_font "1"

# set -g @plugin 'catppuccin/tmux'
# set -g @catppuccin_flavour 'mocha' # or frappe, macchiato, mocha
# set -g @catppuccin_window_tabs_enabled on # or off to disable window_tabs
# set -g @catppuccin_left_separator "█"
# set -g @catppuccin_right_separator "█"
# set -g @catppuccin_date_time "%Y-%m-%d %H:%M"
# set -g @catppuccin_user "off"
# set -g @catppuccin_host "on"

# https://github.com/tmux-plugins/tmux-copycat
# This plugin enables:
# -  regex searches (native support added in tmux 3.1)
# -  search result highlighting
# -  predefined searches
# prefix + / - regex search (strings work too)
# prefix + ctrl-f - simple file search
# prefix + ctrl-g - jumping over git status files (best used after git status command)
# prefix + alt-h - jumping over SHA-1/SHA-256 hashes (best used after git log command)
# prefix + ctrl-u - url search (http, ftp and git urls)
# prefix + ctrl-d - number search (mnemonic d, as digit)
# prefix + alt-i - ip address search
#set -g @plugin 'tmux-plugins/tmux-copycat'

# Restore tmux environment after system restart.
# https://github.com/tmux-plugins/tmux-resurrect
# prefix + Ctrl-s - save
# prefix + Ctrl-r - restore
# set -g @plugin 'tmux-plugins/tmux-resurrect'
# set -g @resurrect-capture-pane-contents 'on'
# Custom keys
# set -g @resurrect-save 'S'
# set -g @resurrect-restore 'R'

# https://github.com/tmux-plugins/tmux-continuum
# set -g @plugin 'tmux-plugins/tmux-continuum'
# Update the saved session every five minutes.
# set -g @continuum-save-interval '10'
# Enable automatic session restoring.
# set -g @continuum-restore 'on'
# Automatic Tmux start
# set -g @continuum-boot-options 'alacritty'

# https://github.com/tmux-plugins/tmux-open
set -g @plugin 'tmux-plugins/tmux-open'
# In tmux copy mode:
#   - o - "open" a highlighted selection with the system default program. open for OS X or xdg-open for Linux.
#   - Ctrl-o - open a highlighted selection with the $EDITOR
#   - Shift-s - search the highlighted selection directly inside a search engine (defaults to google).
# Change the default search engine, also multiples search engines
set -g @open-S 'https://www.duckduckgo.com/'
set -g @open-B 'https://www.bing.com/search?q='

# Automatic restoring and continuous saving of tmux env is also possible with tmux-continuum plugin.

# Switch sessions
set -g @plugin 'sainnhe/tmux-fzf'
set -g @tmux-fzf-launch-key 'C-s'


## DRACULA Theme
# set -g @plugin 'dracula/tmux'

# set -g @plugin 'lawabidingcactus/tmux-gruvbox-truecolor'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run -b '~/.tmux/plugins/tpm/tpm'
### }}}

# OS Config
# {{{

# if-shell 'test "$(uname)" = "Darwin"' 'source ~/.config/tmux/osx.conf'
# if-shell 'test "$(uname)" = "Linux"' 'source ~/.config/tmux/linux.conf'

# Only show status bar when > 1 window
# https://www.reddit.com/r/tmux/comments/6lwb07/is_it_possible_to_hide_the_status_bar_in_only_a/dpzr5d7/
# if -F "#{==:#{session_windows},1}" "set -g status off" "set -g status on"
# set-hook -g window-linked 'if -F "#{==:#{session_windows},1}" "set -g status off" "set -g status on"'
# set-hook -g window-unlinked 'if -F "#{==:#{session_windows},1}" "set -g status off" "set -g status on"'

# }}}


# iTerm2
# set-option -g allow-passthrough on
# set-option -g set-titles on
# set-option -g set-titles-string '#T'
set-window-option -g automatic-rename off
set-option -g allow-rename off

