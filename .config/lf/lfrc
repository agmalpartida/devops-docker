# interpreter for shell commands
set shell sh

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 10

# Use the `dim` attribute instead of underline for the cursor in the preview pane
set cursorpreviewfmt "\033[7;2m"

set filesep " "

set previewer ~/.config/lf/scope-lf-wrapper.sh

# Automatic refresh
set period 1

# Enable file and directory information like rangers defaults:
set info size

#set drawbox true

#set icons

set hiddenfiles ".*:*.aux:*.log:*.bbl:*.bcf:*.blg:*.run.xml"


###############
### mapping ###
###############

# toggle hidden files (default shortcut is 'zh')
map . set hidden!

# use enter for shell commands
map <enter> shell

# show the result of execution of previous commands
map ` !true

# execute current file (must be executable)
map x $$f
map X !$f

# mkdir command. See wiki if you want it to select created dir
map a :push %mkdir<space>

### clear mark from files after pasting ###
#In lf, files that have been copied are marked and stay marked after being pasted/moved. This changed the behavior back to rangers default:
map p : paste; clear

### Deleting files / Trash ###
#By default, the delete command is not enabled in lf, so we need to add it if we want to remove files or move it to the trash. One of the cool projects I found while experimenting with lf was trash-cli and how easy it integrates into lf:
cmd trash %trash $fx
map D trash

# Movement
map gD cd ~/Documents
map gd cd ~/Downloads
map gc cd ~/.config
#map gg cd ~/Git
map gm cd ~/Movies


# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open ${{
    case $(file --mime-type -Lb $f) in
        text/*) lf -remote "send $id \$$EDITOR \$fx";;
        *) for f in $fx; do $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

cmd chmodx &{{
	chmod u+x $fx
	lf -remote "send $id reload"
}}

cmd stop ${{
	kill -TSTP $(ps -p $$ -o 'ppid=')
}}
map <c-z> stop

cmd fzf_select ${{
    lf -remote "send select '$(
        FZF_DEFAULT_COMMAND="fd --search-path $PWD" \
            fzf --exact --preview-window=nohidden
    )'"
}}
map <c-f> fzf_select


